@node Bot control
@chapter Bot control

This is a complete description of how to use the bots features
interactively or from scripts. @xref{Writing plugins}, for further
control over the bot.

The bot is commonly started from a lisp REPL, but nobody stops you from
writing the commands described here in a lisp script and execute it to
start the bot.

@ifclear included
See INSTALL for details.
@end ifclear
@ifset included
@xref{Installation}, for details.
@end ifset

@menu
* Configuring::         How to create a bot instance
* Running::             Connecting to server and entering the read loop
* Stopping::            Disconnecting the bot
@end menu

@node Configuring
@section Configuring

The bot configuration is controlled trough an instance of the class
@code{bot}.

To let a bot connect to a server and join channels, you have to create a
bot-instance and give it the necessary options and flags.

The basic function for doing this is:

@deffn Function make-bot nick channel &key plugins datadir
Create a bot instance.

@var{nick} is the nickname which the bot tries to use when it connects
to a IRC-server.

The @var{channel} argument is either a single string with a channel name or a
list of such strings. In this case, the bot will join them all.

The @var{plugins} argument is a list where each element can be either
the class of a plugin (e.g. @code{bot-plugins:help-plugin}), an
instance of a plug-in or a list of any of those.

@var{datadir} is a way to override the
@code{*default-data-directory*}. This is the root directory where the
bot and it's plugins will save their data.

This means that you can create a list of configured plugin instances
beforehand so that you don't have to specify them every time when you
recreate your bot.

Example usage:

@example
(bot:make-bot "lispbot" '("#chan1" "#chan2")
              :plugins `(bot.plugins:help-plugin
                         bot.plugins:dice-plugin
                         ,(make-instance 'bot.plugins:greet-plugin
                                         :greet-new-users t)))
@end example

Typically (for interactive use) you will save the returned bot instance
in a global variable to be able to refer to it later.
@end deffn

@node Running
@section Running

Currently there is no support for threading and thus the folllowing
command will block your REPL. This will change in the future.

@deffn Function start bot server &optional port

Let the @var{bot} connect to the IRC-server @var{server}.

@end deffn

@node Stopping
@section Stopping

